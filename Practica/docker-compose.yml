services:
  web:
    build: ./app
    # Cargar el fichero con las variables de entorno
    env_file:
      - env_test1.env
    ports:
      - "5000:5000"
    volumes:
      - ./logs:/app/logs
    depends_on:
      - db
    # Espera 10 segundos antes de lanzar la creacion de la DDBB  
    entrypoint: ["sh", "-c", "sleep 10 && python app.py"]  

  db:
    image: postgres:13-alpine
    restart: always
    volumes:
      - db_data:/var/lib/postgresql/data
      # Configuracion inicial de la base de datos (SIN script de inicializacion) 
      #- ./init.sql:/docker-entrypoint-initdb.d/init.sql
      # Configuracion inicial de la base de datos (CON script de inicializacion)
      - ./generate_init_sql.sh:/docker-entrypoint-initdb.d/generate_init_sql.sh
      - ./env_test1.env:/docker-entrypoint-initdb.d/env_test1.env
        
    environment:
      POSTGRES_PASSWORD: qwerty
      POSTGRES_USER: superadmin
    # Cargar el fichero con las variables de entorno      
    env_file:
      - env_test1.env

  adminer:
    image: adminer
    restart: always
    ports:
      - 8080:8080  

  loki:
    image: grafana/loki:latest
    ports:
      - 3100:3100
    volumes:
      - ./loki-config.yml:/etc/loki/loki-config.yaml
  promtail:
    image: grafana/promtail:latest
    volumes:
      - ./promtail-config.yml:/etc/promtail/promtail-config.yaml
  grafana:
    image: grafana/grafana
    ports:
      - 3000:3000

volumes:
  db_data:
